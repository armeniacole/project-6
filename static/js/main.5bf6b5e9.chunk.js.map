{"version":3,"sources":["images/heroImage.png","firebase.js","components/LandingPage.js","components/Dashboard.js","components/RecipeGrid.js","components/FullRecipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LandingPage","checkName","e","preventDefault","eventNames","props","event","forEach","object","push","eventName","includes","createEventName","setState","userIsDuplicate","state","createEvent","moveToSection","scroller","scrollTo","duration","delay","smooth","className","onSubmit","this","action","errorMessage","onChange","getEventName","name","type","placeholder","htmlFor","onClick","map","userEvents","eventIndex","key","to","Component","EventPage","getNewGuest","target","value","addGuest","copyOfGuests","guestList","makeObject","newGuest","unshift","database","ref","match","params","partyName","update","currentGuest","string","toString","savedIngredients","ingredients","currentIngredients","selectIngredient","index","parseInt","copyOfIngredients","availableIngredients","remainingIngredients","splice","addIngredient","removeFromCart","ingredient","copyOfCart","deleteMeal","mealId","child","remove","recipes","on","data","val","firebaseArray","Object","values","fullRecipes","pop","recipe","reduce","a","b","concat","isEnabled","length","cartIsEnabled","id","disabled","recipeIndex","idMeal","strMeal","src","strMealThumb","alt","console","log","guest","guestIndex","ingredientIndex","RecipeGrid","updateUserCategory","userCategory","axiosCall","updatedCategory","axios","url","method","dataResponse","then","response","recipeArray","meals","userRecipes","i","FullRecipe","sendToFirebase","newRecipeObject","recipeObject","finalIngredientsArray","currentItem","measurement","join","item","strInstructions","React","App","copyOfEvents","events","set","guests","dummy","savedEvents","basename","process","exact","path","render","errorMessage2","Dashboard","component","sendUserSelectionToState","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5bf6b5e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/heroImage.4fd9abdf.png\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDfnLUSNBZGj6ENYLSwpqyMdp4YJ8zDUvw\",\n    authDomain: \"whats-for-dinner-a216e.firebaseapp.com\",\n    databaseURL: \"https://whats-for-dinner-a216e.firebaseio.com\",\n    projectId: \"whats-for-dinner-a216e\",\n    storageBucket: \"\",\n    messagingSenderId: \"113268541767\",\n    appId: \"1:113268541767:web:6abfd7cd097beed865e462\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React,{Component} from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport heroImage from '../images/heroImage.png';\nimport firebase from '../firebase';\nimport {Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\n\n\n\n\n\nclass LandingPage extends Component {\n    constructor() {\n        super() \n        this.state = {\n            userIsDuplicate: false,\n        }\n    }\n    \n    checkName = (e) => {\n        e.preventDefault();\n        const message = () => this.setState\n        const eventNames = [];\n    \n        (this.props.event).forEach((object)=> {\n            eventNames.push(object.eventName);\n        });\n        // returns true if there is a duplicate\n        eventNames.includes(`${this.props.createEventName}`)? this.setState({\n            userIsDuplicate: !this.state.userIsDuplicate\n        }) : this.props.createEvent();\n        //forEach loop over props.event array and pull out each object.name value to create an array of eventNames\n        //if eventNames.includes(`${props.createEventName}`) then\n        //return true else return false\n    }\n\n    moveToSection = () => {\n        scroller.scrollTo('events', {\n            duration: 1500,\n            delay: 20,\n            smooth: \"easeInOutQuint\",\n        });\n    }\n\n    render(){\n        return (\n            <div className=\"landingPage\">\n                <header className=\"landingHeader\">\n                    <h1>What's For Dinner?</h1>\n                    {/* <nav>\n                        <ul>\n                            <li><Link to=\"/\">Home</Link></li>\n                            <li><Link to=\"/event/:\">Event Page</Link></li>\n                        </ul>\n                    </nav> */}\n                </header>\n                <section className=\"start\">\n                    <div className=\"wrapper startContainer\">\n                        <div className=\"tagLine\">\n                            <h2>We help you organize <span className=\"redText\">Dinner Parties</span></h2>\n                        </div>\n                        <div className=\"startForm\">\n                            <form \n                            // onSubmit={this.pushToFirebase} \n                            onSubmit={this.checkName}\n                            action=\"\"> \n                                {this.props.errorMessage !=='' ? <p>{this.props.errorMessage}</p> : null}\n                                <input onChange={this.props.getEventName} name=\"createEvent\" className=\"createEvent\" type=\"text\" placeholder=\"enter your group name\"/>\n                                <label htmlFor=\"createEvent\" className=\"visuallyHidden\">Enter your group name</label>\n                                <div className=\"buttons\">\n                                    <button className=\"submit\">\n                                        Submit\n                                        {/* This button creates a new event object in the events array AND links to event page. */}\n                                    </button>      \n                                    <p>or</p>\n                                    <div className=\"skipToEvents\"\n                                    onClick={this.moveToSection}>\n                                        <p>Skip To Events</p>\n                                        {/* link to events (scroll) */}\n                                    </div>\n                                </div>\n                            </form>\n                            {this.state.userIsDuplicate ? <p>User already exists</p> : null}\n                        </div>\n                    </div>\n                </section>\n                <section className=\"events\">\n                    <div className=\"wrapper\">\n                        <div>\n                            <h2>Events</h2>\n                            <h3>Click on event to view dinner party</h3>\n                        </div>\n                        <ul>\n                            {/* map through this.state.events and return events to page as <li> elements in <Link>s. */}\n                            {/* {props[\"event\"] ?console.log(props[\"event\"][0]):console.log('null')} */}\n                            {this.props.event?\n                                this.props.event.map((userEvents, eventIndex) => {\n                                    return (\n                                        // console.log(userEvents.eventName)\n                                            <Link key={eventIndex} to={`/dashboard/${userEvents.eventName}`}>\n                                                <li key={eventIndex}>\n                                                    {userEvents.eventName}\n                                                </li>\n                                            </Link>\n                                            \n                                    )\n                                }\n                            ):null}\n                        </ul>\n                    </div>\n                </section>\n            </div>\n        )\n   };  \n  \n}\nexport default LandingPage;","import React,{Component} from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport firebase from '../firebase';\n\nclass EventPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // event from events in firebase\n      event: [],\n      // for adding guests\n      newGuest: \"\",\n      guestList: [],\n      // displaying recipe information\n      recipes: [],\n      remainingIngredients: [],\n      // for picking ingredients\n      currentGuest: \"\",\n      currentIngredients: []\n    };\n  }\n\n  componentDidMount() {\n    // using the name of the party from the url will match the item in firebase\n    const dbRef = firebase\n      .database()\n      .ref(`events/${this.props.match.params.partyName}`);\n\n    dbRef.on(\"value\", data => {\n      const event = data.val();\n      // make an array from the object in firebase\n      const firebaseArray = Object.values(event);\n\n      const fullRecipes = Object.values(firebaseArray[2]);\n      // remove the dummy data so the map doesn't fail\n      fullRecipes.pop();\n\n      // map over saved recipes to get the total ingredient list from saved recipes\n      // the map produces an array of arrays.\n      const remainingIngredients = fullRecipes.map((recipe, index) => {\n        return recipe.ingredients.map((ingredients, index) => {\n          return ingredients;\n        });\n      });\n      // to combine those arrays into one array\n      const ingredients = remainingIngredients.reduce(function(a, b) {\n        return a.concat(b);\n      }, []);\n\n      // set state with values needed from firebase\n      this.setState({\n        event: firebaseArray,\n        guestList: firebaseArray[1].guestList ? firebaseArray[1].guestList : [],\n        recipes: firebaseArray[2] ? fullRecipes : [],\n        remainingIngredients: firebaseArray[2] ? ingredients : []\n      });\n    });\n  }\n\n  // event handler for name input to add guest value to state for saving\n  getNewGuest = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  // adds guest to guest list and then sends the new whole list up to firebase\n  addGuest = event => {\n    event.preventDefault();\n\n    const copyOfGuests = [...this.state.guestList];\n    // makes the guest into an object so ingredients can be added later\n    const makeObject = { name: this.state.newGuest };\n    // puts the new guest at the start of the list\n    copyOfGuests.unshift(makeObject);\n\n    this.setState(\n      {\n        guestList: copyOfGuests,\n        newGuest: \"\"\n      },\n      () => {\n        const dbRef = firebase\n          .database()\n          .ref(`events/${this.props.match.params.partyName}/guests`);\n\n        dbRef.update({\n          guestList: this.state.guestList\n        });\n      }\n    );\n  };\n\n\n//   finds out which guest is selecting ingredients to add to their list\n  currentGuest = event => {\n    event.preventDefault();\n    const string = event.target.value.toString();\n    // retrieves ingredients they already have saved in firebase and puts in \"cart\" array. so existing ingredients don't get overwritten (in firebase) and also allows users to make changes to their entire list.\n    const savedIngredients = this.state.guestList[string].ingredients\n      ? [...this.state.guestList[string].ingredients]\n      : [];\n\n    this.setState({\n      currentGuest: string,\n      currentIngredients: savedIngredients\n    });\n  };\n\n//   for selecting the ingredients to add to their list\n  selectIngredient = event => {\n    event.preventDefault();\n\n    // get the name of the ingredient to be added\n    const name = event.target.value;\n\n    // index so that the ingredient can be removed from the master list\n    const index = parseInt(event.target.name, 10);\n\n    // adds the ingredient to the \"cart\"\n    const copyOfIngredients = [...this.state.currentIngredients];\n    copyOfIngredients.push(name);\n\n    // removes the ingredient from master list (this is not functional yet as it gets re-rendered from firebase in componentDidMount)\n    const availableIngredients = this.state.remainingIngredients;\n    availableIngredients.splice(index, 1);\n\n    this.setState({\n      currentIngredients: copyOfIngredients,\n      remainingIngredients: availableIngredients\n    });\n  };\n\n//   saving the ingredients to specific guests of that event in firebase.\n  addIngredient = event => {\n    event.preventDefault();\n\n    const dbRef = firebase.database().ref(`events/${this.props.match.params.partyName}/guests/guestList/${this.state.currentGuest}`);\n\n    dbRef.update({\n        ingredients: this.state.currentIngredients\n    },() => {\n        // clears the selected ingredients for the next user\n        this.setState({\n          currentIngredients: []\n        });\n      }\n    );\n  };\n\n//   to remove item from cart\n// if we get delete from master list working- this needs to then add it back \n  removeFromCart = event => {\n    event.preventDefault();\n    // value comes out as a string of the index\n    const ingredient = event.target.value;\n    // make it a number\n    const index = parseInt(ingredient, 10);\n\n    const copyOfCart = this.state.currentIngredients;\n    // remove that item from the \"cart\"\n    copyOfCart.splice(index, 1);\n\n    this.setState({\n      currentIngredients: copyOfCart\n    });\n  };\n\n//   deletes meal from event - will also delete the ingredient list.\n// need to make a function that also reaches into each guest and compares values and removes from their saved ingredients.\n  deleteMeal = mealId => {\n    const dbRef = firebase\n      .database()\n      .ref(`events/${this.props.match.params.partyName}/recipes`);\n\n    dbRef.child(mealId).remove();\n  };\n\n  render() {\n    // disable buttons for forms when stuff is incomplete\n    const isEnabled = this.state.newGuest.length > 0;\n    const cartIsEnabled =\n      this.state.currentGuest !== \"\" && this.state.currentIngredients !== [];\n\n    return (\n      <div className=\"dashBoard\">\n        <header className=\"dash\">\n          <h1>{this.state.event[0]}</h1>\n          <Link to=\"/\">Home</Link>\n        </header>\n\n        <div className=\"stepOne\">\n          <form onSubmit={this.addGuest} action=\"\">\n            <label htmlFor=\"addGuest\"></label>\n            {/* Below input adds guest to guest array on event object in Firebase. */}\n\n            <input\n              onChange={this.getNewGuest}\n              name=\"newGuest\"\n              placeholder=\"add a new guest one at a time\"\n              value={this.state.newGuest}\n              type=\"text\"\n              id=\"addGuest\"\n            />\n            <label htmlFor=\"clickToSubmitGuest\"></label>\n            <button disabled={!isEnabled} id=\"clickToSubmitGuest\">\n              Add guest\n            </button>\n          </form>\n\n          {/* Below link takes user to page where they select recipes */}\n          <Link to={`/recipegrid/${this.props.match.params.partyName}`}>\n            Find Recipes\n          </Link>\n        </div>\n\n        {/* Maps chosen recipe details to page as a link to the full recipe */}\n        <section className=\"chosenRecipes\">\n          {this.state.recipes\n            ? this.state.recipes.map((recipe, recipeIndex) => {\n                return (\n                  <div>\n                    <Link\n                      key={recipeIndex}\n                      to={`/fullrecipe/${recipe.recipe.idMeal}/${this.props.match.params.partyName}`}\n                    >\n                      <h3>{recipe.recipe.strMeal}</h3>\n                      <img\n                        src={recipe.recipe.strMealThumb}\n                        alt={recipe.recipe.strMeal}\n                      />\n                    </Link>\n                    <button\n                      onClick={() => this.deleteMeal(recipe.recipe.strMeal)}\n                    >\n                      delete\n                    </button>\n                  </div>\n                );\n              })\n            : console.log(\"fail\")}\n        </section>\n\n        <div className=\"stepTwo\">\n          {/* Maps the master ingredient list to the page */}\n          <section className=\"ingredients\">\n            <ul>\n              {this.state.recipes\n                ? this.state.remainingIngredients.map((ingredient, index) => {\n                    return (\n                      <li key={index}>\n                        <button\n                          name={index}\n                          onClick={this.selectIngredient}\n                          value={ingredient}\n                        >\n                          {ingredient}\n                        </button>\n                      </li>\n                    );\n                  })\n                : console.log(\"fail\")}\n            </ul>\n          </section>\n\n          <section className=\"basket\">\n            {/* form for the \"cart\" so users can add ingredients to their lists */}\n            <form action=\"\">\n              <select onChange={this.currentGuest} name=\"\" id=\"\">\n                {/* map users and save the value of the index number */}\n                <option value=\"\">Please Select a Guest</option>\n                {this.state.guestList\n                  ? this.state.guestList.map((guest, guestIndex) => {\n                      return (\n                        <option name=\"currentGuest\" value={guestIndex}>\n                          {guest.name}\n                        </option>\n                      );\n                    })\n                  : console.log(\"fail\")}\n              </select>\n              <div>\n                {/* display what is in their \"cart\"*/}\n                <ul>\n                  {this.state.currentIngredients\n                    ? this.state.currentIngredients.map(\n                        (ingredient, ingredientIndex) => {\n                          return (\n                            <div>\n                              <li key={ingredientIndex}>{ingredient}</li>\n                              <button\n                                value={ingredientIndex}\n                                onClick={this.removeFromCart}\n                              >\n                                Remove\n                              </button>\n                            </div>\n                          );\n                        }\n                      )\n                    : console.log(\"fail\")}\n                </ul>\n              </div>\n              {/* button pushes to firebase */}\n              <button disabled={!cartIsEnabled} onClick={this.addIngredient}>\n                Save\n              </button>\n              {!cartIsEnabled && (\n                <p>\n                  Please check you have selected a guest and some ingredients\n                </p>\n              )}\n            </form>\n          </section>\n        </div>\n\n        <section className=\"guests stepThree\">\n          {this.state.guestList\n            ? this.state.guestList.map((guest, guestIndex) => {\n                return (\n                  <div>\n                    <h3 key={guestIndex}>{guest.name}</h3>\n                    <ul>\n                      {guest.ingredients\n                        ? guest.ingredients.map((ingredient, index) => {\n                            return <li key={index}> {ingredient}</li>;\n                          })\n                        : console.log(\"fail\")}\n                    </ul>\n                  </div>\n                );\n              })\n            : console.log(\"fail\")}\n        </section>\n      </div>\n    );\n  }\n}\nexport default EventPage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { link } from 'fs';\n\nclass RecipeGrid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userCategory: '',\n      userRecipes: []\n    };\n  }\n\n  updateUserCategory = e => {\n    // this function is changing the state as soon as the user selects one of the options (eg. Beef, Seafood, etc)\n    this.setState(\n      {\n        userCategory: e.target.value\n      },\n      // then it is passing that state, as a param, into a callback function that is an axios call\n      () => {\n        this.axiosCall(this.state.userCategory);\n      }\n    );\n  };\n\n  // the state is being passed into this axios call as a parameter from the previous call back function\n  axiosCall = updatedCategory => {\n    axios({\n      url: `https://www.themealdb.com/api/json/v1/1/filter.php?c=${updatedCategory}`,\n      method: 'GET',\n      dataResponse: 'json'\n    }).then(response => {\n      //recipeArray is a placeholder array that is being used to store the recipes that the api retrieves\n      // we use a placeholder array so that we can later pass the information into the userRecipes array in state\n      // this process is necssary so that we don't manipulate the state directly!\n      const recipeArray = [];\n\n      recipeArray.push(response.data.meals);\n\n      this.setState({\n        userRecipes: recipeArray[0]\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=''>\n        <header>\n          <h1>Find a recipe</h1>\n        </header>\n        <div className='navContainer'>\n          <Link to='/' className='link'>\n            Home\n          </Link>\n          <Link to='/event/:' className='link'>\n            Event Page\n          </Link>\n        </div>\n        <form action=''>\n          <div className='box'>\n            <select onChange={this.updateUserCategory} name='' id=''>\n              <option value='Beef'>Beef</option>\n              <option value='Chicken'>Chicken</option>\n              <option value='Dessert'>Dessert</option>\n              <option value='Lamb'>Lamb</option>\n              <option value='Pasta'>Pasta</option>\n              <option value='Pork'>Pork</option>\n              <option value='Seafood'>Seafood</option>\n              <option value='Side'>Side</option>\n              <option value='Starter'>Starter</option>\n              <option value='Vegan'>Vegan</option>\n              <option value='Vegetarian'>Vegetarian</option>\n              <option value='Miscellaneous'>Miscellaneous</option>\n            </select>\n          </div>\n          <p className='instructions'>\n            Select a category from the drop down menu then press a recipe!\n          </p>\n        </form>\n        <div>\n          <ul className='recipePreviews'>\n            {this.state.userRecipes.map((recipe, i) => {\n              return (\n                <li id={recipe.idMeal}>\n                  <Link\n                    to={`/fullrecipe/${recipe.idMeal}/${this.props.match.params.partyName}`}>\n                    <h2>{recipe.strMeal}</h2>\n                    <img src={recipe.strMealThumb} />\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\nexport default RecipeGrid;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport firebase from '../firebase';\n\nclass FullRecipe extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      recipeObject: '',\n      finalIngredientsArray: []\n    };\n  }\n\n  componentDidMount() {\n    // Make an API call on page load, based on the param (idMeal) that is passed in through the URL, this is why on the FullRecipe.js Route on App.js we destructured {match}, in order to make this work.\n    axios({\n      url: `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${this.props.match.params.idMeal}`,\n      method: 'GET',\n      dataResponse: 'json'\n    }).then(response => {\n      // save the part of the object we need (from response) in the state\n      const recipe = response.data.meals[0];\n      this.setState({\n        recipeObject: recipe\n      });\n      {\n        // this entire section is used to:\n        // 1) loop through the response/recipe object 20 times\n        // 2) get the measurements and ingredients from the ingredients keys and measurement keys of the response/recipe object\n        // 3) push each individual ingredient with its corresponding (identically numbered) measurement in an array and join() them.\n        // 4) push this array of joined ingredient and measurement into another finalIngredientsArray.\n        //5) Put the finalIngredientArray in state with setState. \n        const finalIngredientsArray = [];\n\n        for (let i = 1; i < 21; i++) {\n          let currentItem = [];\n          let measurement = [];\n          let ingredient = [];\n\n          //ensures that null and empty strings don't get added to a currentItem array, and therefore don't get added to the finalIngredientArray\n\n          if (this.state.recipeObject[`strMeasure${i}`] && this.state.recipeObject[`strMeasure${i}`] !==\"\") {\n            measurement = this.state.recipeObject[`strMeasure${i}`];\n            currentItem.push(measurement);\n          }\n\n          if (this.state.recipeObject[`strIngredient${i}`] && this.state.recipeObject[`strIngredient${i}`] !==\"\") {\n            ingredient = this.state.recipeObject[`strIngredient${i}`];\n            currentItem.push(ingredient);\n          }\n\n          //error handling for when ingredients print out e.g. \"to serve salt.\"  Changes to \"salt for serving\"\n          if (currentItem[0] === \"to serve\"){\n            currentItem = [currentItem[1],\"for serving\"]\n          }\n\n          if (currentItem.length !== 0) {\n          finalIngredientsArray.push(currentItem.join(' '));\n          }\n\n          // finalIngredientsArray.push(currentItem.join(' '));\n        }\n\n        this.setState({\n          finalIngredientsArray: finalIngredientsArray\n        });\n      }\n    });\n  }\n\n  // userSelectionToState = e => {\n  //   e.preventDefault();\n\n  //   this.setState(\n  //     {\n  //       selectedImage: this.state.recipeObject.strMealThumb,\n  //       selectedTitle: this.state.recipeObject.strMeal\n  //     },\n  //     this.props.sendUserSelectionToState(\n  //       e,\n  //       this.state.finalIngredientsArray,\n  //       this.state.recipeObject.strMealThumb,\n  //       this.state.recipeObject.strMeal\n  //     )\n  //   );\n  // };\n\n  sendToFirebase = (event) => {\n    event.preventDefault();\n\n    const newRecipeObject = {recipe: this.state.recipeObject, ingredients: this.state.finalIngredientsArray}\n\n    const dbRef = firebase.database().ref(`events/${this.props.match.params.partyName}/recipes`)\n\n    dbRef.update({\n      [this.state.recipeObject.strMeal]: newRecipeObject,\n    })\n\n\n  }\n\n  render() {\n    {\n      console.log(this.props);\n    }\n    return (\n      <div className=''>\n        <header>\n          <h1>Full Recipes</h1>\n        </header>\n        <div className='navContainer'>\n          <button onClick={this.sendToFirebase}>Save recipe</button>\n          <Link to='/' className='link'>\n            Home\n          </Link>\n          <Link\n            to={`/dashboard/${this.props.match.params.partyName}`}\n            className='link'>\n            Event Dashboard\n          </Link>\n          <Link\n            to={`/recipegrid/${this.props.match.params.partyName}`}\n            className='link'>\n            Recipes\n          </Link>\n        </div>\n        <div className='imageAndTitleContainer'>\n          <h2>{this.state.recipeObject.strMeal}</h2>\n          <img src={this.state.recipeObject.strMealThumb} alt='' />\n        </div>\n        {this.state.finalIngredientsArray.map(item => {\n          return <p>{item}</p>;\n        })}\n        <p>{this.state.recipeObject.strInstructions}</p>\n      </div>\n    );\n  }\n}\nexport default FullRecipe;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport LandingPage from './components/LandingPage';\nimport Dashboard from './components/Dashboard';\nimport RecipeGrid from './components/RecipeGrid';\nimport FullRecipe from './components/FullRecipe';\nimport firebase from './firebase';\nimport './styles/App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n        events:[],\n        createEvent: \"\",\n        errorMessage:\"\"\n    })\n\n  }\n  // function to add new event to Firebase 'event' array as new object.  New object contains all state information with empty strings as key values for any still undetermined info.\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref(`events`);\n\n    dbRef.on('value', data => {\n      const savedEvents = data.val();\n      const firebaseArray = Object.values(savedEvents);\n\n      this.setState({\n        events: firebaseArray ? firebaseArray : []\n      });\n    });\n  }\n\n  // this function is for receiving the on change on the input and setting it to state\n  getEventName = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n\n  // this function runs on Submit\n  createEvent = () => {\n    // event.preventDefault();\n\n    if(this.state.createEvent !== \"\") {\n    // taking the events array in state and copying it\n      const copyOfEvents = [...this.state.events];\n      // this is putting the input we saved in state into an object\n      const makeObject = { name: this.state.createEvent };\n      // we are pushing the object to the copy of the array in state\n      copyOfEvents.unshift(makeObject);\n      // updating the state of events to the new version of the array\n      this.setState(\n        {\n          events: copyOfEvents\n        },\n        () => {\n          // sending new event object to firebase - asynchronous callback\n          const dbRef = firebase\n            .database()\n            .ref(`events/${this.state.events[0].name}`);\n          dbRef.set({\n            eventName: this.state.events[0].name,\n            guests: {dummy: 0},\n            recipes: { dummy: 0 }\n          \n          });\n        }\n      );\n    } \n    else \n    {\n      this.setState({\n        errorMessage: \"Please enter a name for your event before clicking submit\"\n      })\n    }\n  };\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <p>safi!!</p>\n          <Route exact path=\"/\" render={() =>{return <LandingPage event={this.state.events} getEventName={this.getEventName} createEvent={this.createEvent} errorMessage={this.state.errorMessage} errorMessage2={this.state.errorMessage2} createEventName={this.state.createEvent} \n          />}}/>\n          {/* <Route path=\"/contact\" render={() =>{return <Contact name=\"colin\" />}}/> */}\n          {/* the colon below tells router to expect a parameter. This value is going to be passed in later. */}\n\n\n          <Route path=\"/dashboard/:partyName\" \n          render={(props) => { \n            return <Dashboard \n                    {...props}\n                    event={this.state.events} \n          />}}/>\n\n\n          <Route path=\"/recipegrid/:partyName\" component={RecipeGrid} />\n          {/* the below Route is saying: whenever the URL reads fullrecipe/(something),render the FullRecipeComponent.  But so that we can use info from that URL *in* the FullRecipe component, include a parameter so that that parameter can be accessed in the component.  In this case the 'idMeal' parameter tells the FullRecipe component where to look for props.match.params.idMeal.  It will look for this value by looking to the URL.  And since the URL is an ID number, it will use this ID to do its Axios call. */}\n          <Route\n            path=\"/fullrecipe/:idMeal/:partyName\"\n            render={({ match }) => {\n              return (\n                <FullRecipe\n                  sendUserSelectionToState={this.sendUserSelectionToState}\n                  match={match}\n                />\n              );\n            }}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}